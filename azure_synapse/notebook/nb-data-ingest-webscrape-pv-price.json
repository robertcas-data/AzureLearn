{
	"name": "nb-data-ingest-webscrape-pv-price",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "spsmallest",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "30b70caf-4643-417f-9060-b534c76c62c8"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/79a8f46b-9b0d-4ea7-be77-1f7468bd572b/resourceGroups/rg-synapse-azurelearn-dev/providers/Microsoft.Synapse/workspaces/synapse-ws-azurelearn-dev/bigDataPools/spsmallest",
				"name": "spsmallest",
				"type": "Spark",
				"endpoint": "https://synapse-ws-azurelearn-dev.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/spsmallest",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"!pip install BeautifulSoup\r\n",
					"!pip install requests\r\n",
					"!pip install pandas"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Web Scrape Current PV Prices"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from bs4 import BeautifulSoup\r\n",
					"import requests\r\n",
					"import pandas as pd\r\n",
					"\r\n",
					"def subpage_scraping(url):\r\n",
					"    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36'}\r\n",
					"    r = requests.get(url, headers=headers)\r\n",
					"    soup = BeautifulSoup(r.content, 'lxml')\r\n",
					"    #Standortinformationen\r\n",
					"    table = soup.find('table', attrs={'class': 'table offer-view-base'})\r\n",
					"    rows = table.find_all('tr')\r\n",
					"    row_list = list()\r\n",
					"    for tr in rows:\r\n",
					"        td = tr.find_all('td')\r\n",
					"        row = [i.text for i in td]\r\n",
					"        row_list.append(row)\r\n",
					"        row_list_trans = [list(i) for i in zip(*row_list)]\r\n",
					"\r\n",
					"    #Angebote\r\n",
					"    table1 = soup.find('table', attrs={'class': ['table offer-view-grid','table offer-view-grid offer-view-has-accepted-offer']})\r\n",
					"    rows = table1.find_all('tr')\r\n",
					"    row_list1 = list()\r\n",
					"    for tr in rows:\r\n",
					"        td = tr.find_all('td')\r\n",
					"        row = [i.text for i in td]\r\n",
					"        while len(row)<4:\r\n",
					"            row.append('-')     \r\n",
					"        row_list1.append(row)      \r\n",
					"        row_list_trans1 = [list(i) for i in zip(*row_list1)]\r\n",
					"\r\n",
					"    #Module\r\n",
					"    tables = soup.find_all('table', attrs={'class': ['table offer-view-grid','table offer-view-grid offer-view-has-accepted-offer']})\r\n",
					"    table2 = tables[1]\r\n",
					"    rows = table2.find_all('tr')\r\n",
					"    row_list2 = list()\r\n",
					"    for tr in rows:\r\n",
					"        td = tr.find_all('td')\r\n",
					"        row = [i.text for i in td]\r\n",
					"        while len(row)<4:\r\n",
					"            row.append('-')    \r\n",
					"        row_list2.append(row)       \r\n",
					"        row_list_trans2 = [list(i) for i in zip(*row_list2)]    \r\n",
					"\r\n",
					"    #Wechselrichter\r\n",
					"    table3 = tables[2]\r\n",
					"    rows = table3.find_all('tr')\r\n",
					"    row_list3 = list()\r\n",
					"    for tr in rows:\r\n",
					"        td = tr.find_all('td')\r\n",
					"        row = [i.text for i in td]\r\n",
					"        while len(row)<4:\r\n",
					"            row.append('-')    \r\n",
					"        row_list3.append(row)        \r\n",
					"        row_list_trans3 = [list(i) for i in zip(*row_list3)] \r\n",
					"\r\n",
					"    #Stromspeicher\r\n",
					"    table4 = tables[4]\r\n",
					"    rows = table4.find_all('tr')\r\n",
					"    if len(rows) == 0:\r\n",
					"        row_list_trans4 = [['-']*6]*4\r\n",
					"    else:\r\n",
					"        row_list4 = list()\r\n",
					"        for tr in rows:\r\n",
					"            td = tr.find_all('td')\r\n",
					"            row = [i.text for i in td]\r\n",
					"            #print('-'*20 + 'row' + '-'*20 + 'with length of ' + str(len(row)))\r\n",
					"            #print(row)\r\n",
					"            while len(row)<4:\r\n",
					"                row.append('-')\r\n",
					"            #print('-'*20 + 'new row' + '-'*20 + 'with length of ' + str(len(row)))\r\n",
					"            #print(row)        \r\n",
					"            row_list4.append(row)\r\n",
					"            #print('-'*20 + 'row_list' + '-'*20)\r\n",
					"            #print(row_list4)        \r\n",
					"            row_list_trans4 = [list(i) for i in zip(*row_list4)]   \r\n",
					"    \r\n",
					"    #Montage und sonstige Leistungen\r\n",
					"    table5 = tables[5]\r\n",
					"    rows = table5.find_all('tr')\r\n",
					"    #tags = rows[0]('span')\r\n",
					"    #title = tags[0].get('title')\r\n",
					"    row_list5 = list()\r\n",
					"    for tr in rows:\r\n",
					"        td = tr.find_all('td')\r\n",
					"        row = [i.find('span').get('title') if i.find('span') is not None else i.text for i in td]\r\n",
					"        while len(row)<4:\r\n",
					"            row.append('-')     \r\n",
					"        row_list5.append(row)    \r\n",
					"        row_list_trans5 = [list(i) for i in zip(*row_list5)]\r\n",
					"\r\n",
					"    \r\n",
					"    return row_list_trans, row_list_trans1, row_list_trans2, row_list_trans3, row_list_trans4, row_list_trans5\r\n",
					"\r\n",
					"PVs = []\r\n",
					"\r\n",
					"for i in range(0,1244):\r\n",
					"    url =  'https://www.photovoltaikforum.com/board/41-angebote/?pageNo='+str(i)\r\n",
					"    headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36'}\r\n",
					"    r = requests.get(url, headers=headers)\r\n",
					"    soup = BeautifulSoup(r.content, 'html5lib')\r\n",
					"    table = soup.find('ol', attrs={'class': 'tabularList'})\r\n",
					"\r\n",
					"    \r\n",
					"    for row in table.findAll('li',\r\n",
					"                                attrs={'class': 'tabularListRow'}):\r\n",
					"        children = row.findChildren(\"ol\", recursive=False)\r\n",
					"\r\n",
					"        for child in children:\r\n",
					"            grandchildren = child.findChildren(\"li\", recursive=False)\r\n",
					"            for grandgrandchild in grandchildren:\r\n",
					"                prefinalchild = grandgrandchild.findChildren(\"h3\", recursive=False)\r\n",
					"                try:\r\n",
					"                    timestamp = grandgrandchild.findAll('time', attrs={'class': 'datetime'})\r\n",
					"                    uhrzeit = timestamp[0]['datetime']\r\n",
					"                except:\r\n",
					"                    uhrzeit = \"nan\"\r\n",
					"                    #print(\"no_timestamp\")\r\n",
					"\r\n",
					"\r\n",
					"                for finalchild in prefinalchild:\r\n",
					"                    PV_values = finalchild.findChildren(\"a\", attrs={'class': 'messageGroupLink wbbTopicLink'}, recursive=False)\r\n",
					"                    quote = row.a['href']\r\n",
					"                    try:\r\n",
					"                        PV_value1 = PV_values[0].string\r\n",
					"\r\n",
					"                        PV_value1 = str(PV_value1).replace(',', '.')\r\n",
					"                    except:\r\n",
					"                        PV_value1 = \"nan\"\r\n",
					"                    #print(PV_value1)\r\n",
					"                    if ('Photovoltaikforum' in PV_value1) or ('PV-Forum' in PV_value1):\r\n",
					"                        break\r\n",
					"                    else:\r\n",
					"                        PV_val = {}\r\n",
					"                        PV_val['PV_Values'] = PV_value1\r\n",
					"                        PV_val['timestamp'] = uhrzeit\r\n",
					"                        PV_val['url'] = quote\r\n",
					"\r\n",
					"                        # #Daten der Unterseiten ebenfalls crawlen!\r\n",
					"                        try:\r\n",
					"                            standort, angebote, module, wechselrichter, speicher, rest = subpage_scraping(quote)\r\n",
					"                            #Standortinformationen auslesen\r\n",
					"                            PV_val['PLZ'] = standort[1][1]\r\n",
					"                            PV_val['Land'] = standort[1][2]\r\n",
					"                            PV_val['Dachneigung'] = standort[1][3]\r\n",
					"                            PV_val['Ausrichtung'] = standort[1][4]\r\n",
					"                            PV_val['Art der Anlage'] = standort[1][5]\r\n",
					"                            PV_val['Ertragsprognose'] = standort[1][13]\r\n",
					"                            PV_val['Eigenkapital'] = standort[1][14]\r\n",
					"                            #Angebote auslesen\r\n",
					"                            try: \r\n",
					"                                PV_val['A1_Einstellungsdatum'] = angebote[1][1]\r\n",
					"                                PV_val['A1_DatumdesAngebots'] = angebote[1][2]\r\n",
					"                                PV_val['A1_Preis_kWp'] = angebote[1][3]\r\n",
					"                                PV_val['A1_Ertragsprognose'] = angebote[1][4]\r\n",
					"                                PV_val['A1_Anlagengroesse'] = angebote[1][5]\r\n",
					"                                PV_val['A1_Infotext'] = angebote[1][6]                        \r\n",
					"                            except Exception as e: \r\n",
					"                                print(e)\r\n",
					"                                pass\r\n",
					"                            try: \r\n",
					"                                PV_val['A2_Einstellungsdatum'] = angebote[2][1]\r\n",
					"                                PV_val['A2_DatumdesAngebots'] = angebote[2][2]\r\n",
					"                                PV_val['A2_Preis_kWp'] = angebote[2][3]\r\n",
					"                                PV_val['A2_Ertragsprognose'] = angebote[2][4]\r\n",
					"                                PV_val['A2_Anlagengroesse'] = angebote[2][5]\r\n",
					"                                PV_val['A2_Infotext'] = angebote[2][6]                        \r\n",
					"                            except Exception as e: \r\n",
					"                                print(e)\r\n",
					"                                pass\r\n",
					"                            try: \r\n",
					"                                PV_val['A3_Einstellungsdatum'] = angebote[3][1]\r\n",
					"                                PV_val['A3_DatumdesAngebots'] = angebote[3][2]\r\n",
					"                                PV_val['A3_Preis_kWp'] = angebote[3][3]\r\n",
					"                                PV_val['A3_Ertragsprognose'] = angebote[3][4]\r\n",
					"                                PV_val['A3_Anlagengroesse'] = angebote[3][5]\r\n",
					"                                PV_val['A3_Infotext'] = angebote[3][6]                        \r\n",
					"                            except Exception as e: \r\n",
					"                                print(e)\r\n",
					"                                pass\r\n",
					"                            try: \r\n",
					"                                PV_val['A1_Modulanzahl'] = module[1][1]\r\n",
					"                                PV_val['A1_Modulhersteller'] = module[1][2]    \r\n",
					"                                PV_val['A1_Modulbezeichnung'] = module[1][3]\r\n",
					"                                PV_val['A1_Nennleistung_Modul'] = module[1][4]\r\n",
					"                                PV_val['A1_Preis_Modul'] = module[1][5]\r\n",
					"                            except Exception as e: \r\n",
					"                                print(e)\r\n",
					"                                pass \r\n",
					"                            try: \r\n",
					"                                PV_val['A2_Modulanzahl'] = module[2][1]\r\n",
					"                                PV_val['A2_Modulhersteller'] = module[2][2]    \r\n",
					"                                PV_val['A2_Modulbezeichnung'] = module[2][3]\r\n",
					"                                PV_val['A2_Nennleistung_Modul'] = module[2][4]\r\n",
					"                                PV_val['A2_Preis_Modul'] = module[2][5]\r\n",
					"                            except Exception as e: \r\n",
					"                                print(e)\r\n",
					"                                pass  \r\n",
					"                            try: \r\n",
					"                                PV_val['A3_Modulanzahl'] = module[3][1]\r\n",
					"                                PV_val['A3_Modulhersteller'] = module[3][2]    \r\n",
					"                                PV_val['A3_Modulbezeichnung'] = module[3][3]\r\n",
					"                                PV_val['A3_Nennleistung_Modul'] = module[3][4]\r\n",
					"                                PV_val['A3_Preis_Modul'] = module[3][5]\r\n",
					"                            except Exception as e: \r\n",
					"                                print(e)\r\n",
					"                                pass  \r\n",
					"                            try: \r\n",
					"                                PV_val['A1_WR_Anzahl'] = wechselrichter[1][1]\r\n",
					"                                PV_val['A1_WR_Hersteller'] = wechselrichter[1][2]    \r\n",
					"                                PV_val['A1_WR_Bezeichnung'] = wechselrichter[1][3]\r\n",
					"                                PV_val['A1_WR_Preis'] = wechselrichter[1][4]\r\n",
					"                            except Exception as e: \r\n",
					"                                print(e)\r\n",
					"                                pass   \r\n",
					"                            try: \r\n",
					"                                PV_val['A2_WR_Anzahl'] = wechselrichter[2][1]\r\n",
					"                                PV_val['A2_WR_Hersteller'] = wechselrichter[2][2]    \r\n",
					"                                PV_val['A2_WR_Bezeichnung'] = wechselrichter[2][3]\r\n",
					"                                PV_val['A2_WR_Preis'] = wechselrichter[2][4]\r\n",
					"                            except Exception as e: \r\n",
					"                                print(e)\r\n",
					"                                pass   \r\n",
					"                            try: \r\n",
					"                                PV_val['A3_WR_Anzahl'] = wechselrichter[3][1]\r\n",
					"                                PV_val['A3_WR_Hersteller'] = wechselrichter[3][2]    \r\n",
					"                                PV_val['A3_WR_Bezeichnung'] = wechselrichter[3][3]\r\n",
					"                                PV_val['A3_WR_Preis'] = wechselrichter[3][4]\r\n",
					"                            except Exception as e: \r\n",
					"                                print(e)\r\n",
					"                                pass    \r\n",
					"                            try: \r\n",
					"                                PV_val['A1_BS_Anzahl'] = speicher[1][1]\r\n",
					"                                PV_val['A1_BS_Hersteller'] = speicher[1][2]    \r\n",
					"                                PV_val['A1_BS_Bezeichnung'] = speicher[1][3]\r\n",
					"                                PV_val['A1_BS_Kapazitaet'] = speicher[1][4]\r\n",
					"                                PV_val['A1_BS_Preis'] = speicher[1][5]\r\n",
					"                            except Exception as e: \r\n",
					"                                print(e)\r\n",
					"                                pass \r\n",
					"                            try: \r\n",
					"                                PV_val['A2_BS_Anzahl'] = speicher[2][1]\r\n",
					"                                PV_val['A2_BS_Hersteller'] = speicher[2][2]    \r\n",
					"                                PV_val['A2_BS_Bezeichnung'] = speicher[2][3]\r\n",
					"                                PV_val['A2_BS_Kapazitaet'] = speicher[2][4]\r\n",
					"                                PV_val['A2_BS_Preis'] = speicher[2][5]\r\n",
					"                            except Exception as e: \r\n",
					"                                print(e)\r\n",
					"                                pass  \r\n",
					"                            try: \r\n",
					"                                PV_val['A3_BS_Anzahl'] = speicher[3][1]\r\n",
					"                                PV_val['A3_BS_Hersteller'] = speicher[3][2]    \r\n",
					"                                PV_val['A3_BS_Bezeichnung'] = speicher[3][3]\r\n",
					"                                PV_val['A3_BS_Kapazitaet'] = speicher[3][4]\r\n",
					"                                PV_val['A3_BS_Preis'] = speicher[3][5]\r\n",
					"                            except Exception as e: \r\n",
					"                                print(e)\r\n",
					"                                pass   \r\n",
					"                            try: \r\n",
					"                                PV_val['A1_Komplettmontage'] = rest[1][0]\r\n",
					"                                PV_val['A1_Geruest'] = rest[1][1]    \r\n",
					"                                PV_val['A1_Mithilfe'] = rest[1][2]\r\n",
					"                                PV_val['A1_ACAnschluss'] = rest[1][3]\r\n",
					"                                PV_val['A1_Aufstaenderung'] = rest[1][4]\r\n",
					"                            except Exception as e: \r\n",
					"                                print(e)\r\n",
					"                                pass    \r\n",
					"                            try: \r\n",
					"                                PV_val['A2_Komplettmontage'] = rest[2][0]\r\n",
					"                                PV_val['A2_Geruest'] = rest[2][1]    \r\n",
					"                                PV_val['A2_Mithilfe'] = rest[2][2]\r\n",
					"                                PV_val['A2_ACAnschluss'] = rest[2][3]\r\n",
					"                                PV_val['A2_Aufstaenderung'] = rest[2][4]\r\n",
					"                            except Exception as e: \r\n",
					"                                print(e)\r\n",
					"                                pass     \r\n",
					"                            try: \r\n",
					"                                PV_val['A3_Komplettmontage'] = rest[3][0]\r\n",
					"                                PV_val['A3_Geruest'] = rest[3][1]    \r\n",
					"                                PV_val['A3_Mithilfe'] = rest[3][2]\r\n",
					"                                PV_val['A3_ACAnschluss'] = rest[3][3]\r\n",
					"                                PV_val['A3_Aufstaenderung'] = rest[3][4]\r\n",
					"                            except Exception as e: \r\n",
					"                                print(e)\r\n",
					"                                pass                                                                                                           \r\n",
					"                        except Exception as e: \r\n",
					"                            print(e)\r\n",
					"                            pass\r\n",
					"                        \r\n",
					"                        PVs.append(PV_val)\r\n",
					"                        print(i)\r\n",
					"\r\n",
					"## --- Store the Dataframe --- ##\r\n",
					"my_df = pd.DataFrame(PVs)\r\n",
					"my_df['PLZ'] = my_df.PLZ.str.strip() #remove trash \\t\\t\\t\\t\\r ..\r\n",
					"\r\n",
					"# display sample of result\r\n",
					"my_df.sample(10)\r\n",
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# save\r\n",
					"my_df.to_csv('output/pricedata_20220101.csv')"
				],
				"execution_count": null
			}
		]
	}
}